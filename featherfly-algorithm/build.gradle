apply plugin: "java"
apply plugin: "ivy-publish"
apply plugin: 'maven'  
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'

group = "cn.featherfly"
version = "1.0.3"
sourceCompatibility = 1.7  
targetCompatibility = 1.7  

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}
sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
    }
    test {
    	java {
            srcDirs = ["src-test"]
        }
    } 
}
ext {
	compileDependencies =[
				"org.slf4j:slf4j-api:latest.integration"
				,"org.bouncycastle:bcprov-jdk16:1.46"
					] 
	publishRepo = ant.properties['user.home'] + "/.repository/ivy2/gradle_publish"	
	mavenPubRepo = "d:/store/maven/gradle_publish"
}
repositories {
	mavenCentral()
	/*
	ivy {
        url publishRepo
    }   
    maven {
        url mavenPubRepo
    }
    */
}

task sourcesJar(type: Jar) {
	classifier "sources"
    from sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn:javadoc) { 
     classifier = "javadoc"
     from javadoc.destinationDir 
}

artifacts {  
    archives jar  
    archives javadocJar  
    archives sourcesJar  
}  
  
//为所有的jar包做数字签名  
signing {  
    sign configurations.archives  
}  

uploadArchives {  
    repositories {  
        mavenDeployer {  
            //为Pom文件做数字签名  
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) } 
  
            //指定项目部署到的中央库地址，UserName和Password就是Part 1中注册的账号。
            //https://oss.sonatype.org/content/repositories/snapshots
			//https://oss.sonatype.org/service/local/staging/deploy/maven2  
            repository(url:"https://oss.sonatype.org/service/local/staging/deploy/maven2") {  
                authentication(userName: 'yufei', password: 'yufeimvn101')  
            }  
              
            pom.project {  
                name project.name  
                packaging 'jar'
                description 'algorithm tool'  
                url 'https://github.com/featherfly/algorithm.git'  
  
                scm {  
                    url 'scm:git@github.com:featherfly/algorithm.git'  
                    connection 'scm:git@github.com:featherfly/algorithm.git'  
                    developerConnection 'git@github.com:featherfly/algorithm.git'  
                }  
  
                licenses {  
                    license {  
                        name 'The Apache Software License, Version 2.0'  
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'  
                        distribution 'repo'  
                    }  
                }  
  
                developers {  
                    developer {  
                        id 'featherfly'  
                        name 'Yufei'
                    }  
                }  
            }  
        }  
    }  
}  

publishing {
    publications {
    	ivy(IvyPublication) {
    		from components.java
            artifact (sourcesJar) {
             	type "source"
            }
			artifact (javadocJar) {
				type "javadoc"
			}
			descriptor.withXml {
                for (def depend : compileDependencies)  {
                	def deps = depend.split(':')
                	asNode().dependencies[0].appendNode("dependency",
                					['org' : deps[0] , 'name' : deps[1], 'rev' : deps[2]])
				}                
            }
            
        }
    }    
    repositories {
    	
        ivy {
        //    url publishRepo
        }
    }
}
publishing {
    publications {    	
        mavenJava(MavenPublication) {
        	from components.java
            artifact (sourcesJar) {
             	classifier "source"
            }
			artifact (javadocJar) {
				classifier "javadoc"
			}
        }
    }    
    repositories {
        maven {
          //  url mavenPubRepo
        }
    }
}

dependencies {
	/*
	for (def depend : compileDependencies)  {
		compile (depend)
	}
	*/
	compileDependencies.each { String depend ->
		compile (depend)
	}
	/* 
    compile (    
    	"org.slf4j:slf4j-api:latest.integration"
		,"org.bouncycastle:bcprov-jdk16:1.46"
    )
    */
    testCompile (
    	'org.testng:testng:6.8.8'
    )
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG()

    // explicitly include or exclude tests
    //include 'cn/featherfly/**'
    //exclude 'cn/featherfly/security/oauth2/OAuth2ManagerTest.class'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=256m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}
jar {
    manifest {
	    attributes 'Build-Name': archivesBaseName
	    attributes 'Build-By': "zhong ji"
	    attributes 'Tool' : "gradle"
	    attributes 'Build-Jdk' : ant.properties['java.runtime.version']
	    attributes 'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0'
    }
}